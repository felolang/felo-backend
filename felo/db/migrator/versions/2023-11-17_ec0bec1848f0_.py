"""empty message

Revision ID: ec0bec1848f0
Revises: ddf896c79cde
Create Date: 2023-11-17 02:16:49.201736

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = 'ec0bec1848f0'
down_revision = 'ddf896c79cde'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('lookup',
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('source_language', sa.Enum('AB', 'AA', 'AF', 'AK', 'SQ', 'AM', 'AR', 'AN', 'HY', 'AS', 'AV', 'AE', 'AY', 'AZ', 'BM', 'BA', 'EU', 'BE', 'BN', 'BH', 'BI', 'BS', 'BR', 'BG', 'MY', 'CA', 'CH', 'CE', 'NY', 'ZH', 'CV', 'KW', 'CO', 'CR', 'HR', 'CS', 'DA', 'DV', 'NL', 'DZ', 'EN', 'EO', 'ET', 'EE', 'FO', 'FJ', 'FI', 'FR', 'FF', 'GL', 'KA', 'DE', 'EL', 'GN', 'GU', 'HT', 'HA', 'HE', 'HZ', 'HI', 'HO', 'HU', 'IA', 'ID', 'IE', 'GA', 'IG', 'IK', 'IO', 'IS', 'IT', 'IU', 'JA', 'JV', 'KL', 'KN', 'KR', 'KS', 'KK', 'KM', 'KI', 'RW', 'KY', 'KV', 'KG', 'KO', 'KU', 'KJ', 'LA', 'LB', 'LG', 'LI', 'LN', 'LO', 'LT', 'LU', 'LV', 'GV', 'MK', 'MG', 'MS', 'ML', 'MT', 'MI', 'MR', 'MH', 'MN', 'NA', 'NV', 'ND', 'NE', 'NG', 'NB', 'NN', 'NO', 'II', 'NR', 'OC', 'OJ', 'CU', 'OM', 'OR', 'OS', 'PA', 'PI', 'FA', 'PL', 'PS', 'PT', 'QU', 'RM', 'RN', 'RO', 'RU', 'SA', 'SC', 'SD', 'SE', 'SM', 'SG', 'SR', 'GD', 'SN', 'SI', 'SK', 'SL', 'SO', 'ST', 'ES', 'SU', 'SW', 'SS', 'SV', 'TA', 'TE', 'TG', 'TH', 'TI', 'BO', 'TK', 'TL', 'TN', 'TO', 'TR', 'TS', 'TT', 'TW', 'TY', 'UG', 'UK', 'UR', 'UZ', 'VE', 'VI', 'VO', 'WA', 'CY', 'WO', 'FY', 'XH', 'YI', 'YO', 'ZA', 'ZU', name='language'), nullable=False),
    sa.Column('target_language', sa.Enum('AB', 'AA', 'AF', 'AK', 'SQ', 'AM', 'AR', 'AN', 'HY', 'AS', 'AV', 'AE', 'AY', 'AZ', 'BM', 'BA', 'EU', 'BE', 'BN', 'BH', 'BI', 'BS', 'BR', 'BG', 'MY', 'CA', 'CH', 'CE', 'NY', 'ZH', 'CV', 'KW', 'CO', 'CR', 'HR', 'CS', 'DA', 'DV', 'NL', 'DZ', 'EN', 'EO', 'ET', 'EE', 'FO', 'FJ', 'FI', 'FR', 'FF', 'GL', 'KA', 'DE', 'EL', 'GN', 'GU', 'HT', 'HA', 'HE', 'HZ', 'HI', 'HO', 'HU', 'IA', 'ID', 'IE', 'GA', 'IG', 'IK', 'IO', 'IS', 'IT', 'IU', 'JA', 'JV', 'KL', 'KN', 'KR', 'KS', 'KK', 'KM', 'KI', 'RW', 'KY', 'KV', 'KG', 'KO', 'KU', 'KJ', 'LA', 'LB', 'LG', 'LI', 'LN', 'LO', 'LT', 'LU', 'LV', 'GV', 'MK', 'MG', 'MS', 'ML', 'MT', 'MI', 'MR', 'MH', 'MN', 'NA', 'NV', 'ND', 'NE', 'NG', 'NB', 'NN', 'NO', 'II', 'NR', 'OC', 'OJ', 'CU', 'OM', 'OR', 'OS', 'PA', 'PI', 'FA', 'PL', 'PS', 'PT', 'QU', 'RM', 'RN', 'RO', 'RU', 'SA', 'SC', 'SD', 'SE', 'SM', 'SG', 'SR', 'GD', 'SN', 'SI', 'SK', 'SL', 'SO', 'ST', 'ES', 'SU', 'SW', 'SS', 'SV', 'TA', 'TE', 'TG', 'TH', 'TI', 'BO', 'TK', 'TL', 'TN', 'TO', 'TR', 'TS', 'TT', 'TW', 'TY', 'UG', 'UK', 'UR', 'UZ', 'VE', 'VI', 'VO', 'WA', 'CY', 'WO', 'FY', 'XH', 'YI', 'YO', 'ZA', 'ZU', name='language'), nullable=False),
    sa.Column('text', sa.String(), nullable=False),
    sa.Column('context', sa.String(), nullable=True),
    sa.Column('context_translation', sa.String(), nullable=True),
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('create_time', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
    sa.Column('update_time', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], name=op.f('fk__lookup__user_id__user')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk__lookup')),
    sa.UniqueConstraint('id', name=op.f('uq__lookup__id'))
    )
    op.create_table('lookup_answer',
    sa.Column('lookup_id', sa.UUID(), nullable=False),
    sa.Column('engine', sa.Enum('GOOGLE', 'GPT_3_5_TURBO_1106', name='translateengineenum'), nullable=False),
    sa.Column('text_translation', sa.String(), nullable=False),
    sa.Column('normilized_text', sa.String(), nullable=True),
    sa.Column('normilized_text_translation', sa.String(), nullable=True),
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('create_time', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
    sa.Column('update_time', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
    sa.ForeignKeyConstraint(['lookup_id'], ['lookup.id'], name=op.f('fk__lookup_answer__lookup_id__lookup')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk__lookup_answer')),
    sa.UniqueConstraint('id', name=op.f('uq__lookup_answer__id'))
    )
    op.create_table('phrases',
    sa.Column('text', sa.String(), nullable=False),
    sa.Column('normilized_text', sa.String(), nullable=False),
    sa.Column('text_translation', sa.String(), nullable=False),
    sa.Column('normilized_text_translation', sa.String(), nullable=False),
    sa.Column('type', sa.Enum('IDIOM', 'SLANG', 'PHRASAL_VERB', name='phrasestypeenum'), nullable=False),
    sa.Column('lookup_answer_id', sa.UUID(), nullable=False),
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('create_time', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
    sa.Column('update_time', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
    sa.ForeignKeyConstraint(['lookup_answer_id'], ['lookup_answer.id'], name=op.f('fk__phrases__lookup_answer_id__lookup_answer')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk__phrases')),
    sa.UniqueConstraint('id', name=op.f('uq__phrases__id'))
    )
    op.create_unique_constraint(op.f('uq__token__id'), 'token', ['id'])
    op.alter_column('user', 'username',
               existing_type=sa.TEXT(),
               nullable=True)
    op.alter_column('user', 'email',
               existing_type=sa.TEXT(),
               nullable=False)
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column('user', 'email',
               existing_type=sa.TEXT(),
               nullable=True)
    op.alter_column('user', 'username',
               existing_type=sa.TEXT(),
               nullable=False)
    op.drop_constraint(op.f('uq__token__id'), 'token', type_='unique')
    op.drop_table('phrases')
    op.drop_table('lookup_answer')
    op.drop_table('lookup')
    # ### end Alembic commands ###
